name: Check code coverage on main backend

on:
  pull_request:
    branches:
      - main-danny
    paths:
      - "backend/main-backend/**"
  workflow_dispatch:

env:
  CODE_COVERAGE_MODIFIER: 2
  RAMPING_CODE_COVERAGE_CAP: 90

jobs:
  check-code-coverage-on-main-ui:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/main-backend
    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Fetch main branch
        run: git fetch origin main-danny

      - name: Checkout main branch test.config.json
        run: |
          git checkout main-danny -- test.config.json
          cat test.config.json

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "oracle"

      - name: Install xmllint
        run: sudo apt-get install -y libxml2-utils

       - name: Extract coverage threshold from main branch
        id: extract-min-code-coverage-from-main
        run: |
          threshold_file=test.config.json
          if [ -f "$threshold_file" ]; then
            echo "Threshold file found"
            threshold=$(jq '.coverageThreshold.global.lines' $threshold_file)
            echo "Threshold: $threshold"
            echo "threshold=$threshold" >> $GITHUB_OUTPUT
          else
            echo "Threshold file not found"
            exit 1
          fi

      - name: Modify coverage threshold
        id: modify-coverage-threshold
        run: |
          current_threshold=${{ steps.extract-min-code-coverage-from-main.outputs.threshold }}
          new_threshold=$((current_threshold + $CODE_COVERAGE_MODIFIER))
          echo "New Threshold: $new_threshold"

          if [ "$new_threshold" -gt "$RAMPING_CODE_COVERAGE_CAP" ]; then
            new_threshold=$RAMPING_CODE_COVERAGE_CAP
          fi
          echo "New Threshold (after cap): $new_threshold"

          temp_file=jest.config.tmp

          # Update the jest.config.json file with the new threshold
          jq --argjson new_threshold "$new_threshold" '.coverageThreshold.global.lines = $new_threshold' jest.config.json > $temp_file
          mv $temp_file jest.config.json

          echo "new_threshold=$new_threshold" >> $GITHUB_OUTPUT

      - name: Output required line coverage
        run: |
          echo "Current Jest coverage threshold for lines is ${{ steps.extract-min-code-coverage-from-main.outputs.threshold }}%"
          echo "Required line coverage is ${{ steps.modify-coverage-threshold.outputs.new_threshold }}%"

      - name: Build with Maven
        run: mvn clean verify

      - name: Jacoco Code Coverage
        run: mvn jacoco:report

      - name: Check Coverage
        run: |
          # Path to the Jacoco report
          report_path="target/site/jacoco/jacoco.xml"

          # Extract the line coverage percentage
          line_coverage=$(xmllint --xpath "string(//report/counter[@type='LINE']/@covered)" $report_path)
          total_lines=$(xmllint --xpath "string(//report/counter[@type='LINE']/@missed)" $report_path)
          total_lines=$((line_coverage + total_lines))
          coverage_percentage=$((line_coverage * 100 / total_lines))

          echo "Line Coverage: $coverage_percentage%"

          # Check if coverage is at least 70%
          if [ $coverage_percentage -lt 70 ]; then
            echo "Code coverage is below 70%"
            exit 1
          else
            echo "Code coverage is above 70%"
            exit 0
          fi

      - name: Upload coverage report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: target/site/jacoco/

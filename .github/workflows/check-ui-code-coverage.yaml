name: Check UI code coverage

on:
  workflow_call:
    inputs:
      ui-working-directory:
        description: 'The path of the frontend'
        required: true
        type: string

env:
  CODE_COVERAGE_MODIFIER: 2
  RAMPING_CODE_COVERAGE_CAP: 90

jobs:
  check-code-coverage-on-competition-ui:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.ui-working-directory }}
    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run coverage and print results
        run: |
          npm run coverage

      - name: Read and print coverage summary
        id: pull-request-coverage
        run: |
          coverageFile=coverage/coverage-summary.json
          if [ -f "$coverageFile" ]; then
            echo "Coverage file found"
            cat $coverageFile
            lineCoverage=$(jq '.total.lines.pct' $coverageFile)
            statementCoverage=$(jq '.total.statements.pct' $coverageFile)
            branchCoverage=$(jq '.total.branches.pct' $coverageFile)
            functionCoverage=$(jq '.total.function.pct' $coverageFile)

            echo "Total line coverage: $lineCoverage%"
            echo "Total statement coverage: $statementCoverage"
            echo "Total branch coverage: $branchCoverage"
            echo "Total function coverage: $functionCoverage"

            echo "lineCoverage=$lineCoverage" >> $GITHUB_OUTPUT
            echo "statementCoverage=$statementCoverage" >> $GITHUB_OUTPUT
            echo "branchCoverage=$branchCoverage" >> $GITHUB_OUTPUT
            echo "functionCoverage=$functionCoverage" >> $GITHUB_OUTPUT
          else
            echo "Coverage file not found!"
            exit 1
          fi

      # - name: Check if PR coverage exceeds RAMPING_CODE_COVERAGE_CAP
      #   run: |

      # - name: Fetch main branch
      #   run: git fetch origin main:main

      # - name: Checkout main branch jest.config.json
      #   run: |
      #     git checkout main -- jest.config.json
      #     cat jest.config.json

      # - name: Extract coverage threshold from main branch
      #   id: extract-min-code-coverage-from-main
      #   run: |
      #     thresholdFile=jest.config.json
      #     if [ -f "$thresholdFile" ]; then
      #       echo "Threshold file found"
      #       threshold=$(jq '.coverageThreshold.global.lines' $thresholdFile)
      #       echo "Threshold: $threshold"
      #       echo "threshold=$threshold" >> $GITHUB_OUTPUT
      #     else
      #       echo "Threshold file not found"
      #       exit 1
      #     fi

      # - name: Modify coverage threshold
      #   id: modify-coverage-threshold
      #   run: |
      #     current_threshold=${{ steps.extract-min-code-coverage-from-main.outputs.threshold }}
      #     new_threshold=$((current_threshold + $CODE_COVERAGE_MODIFIER))
      #     echo "New Threshold: $new_threshold"

      #     if [ "$new_threshold" -gt "$RAMPING_CODE_COVERAGE_CAP" ]; then
      #       new_threshold=$RAMPING_CODE_COVERAGE_CAP
      #     fi
      #     echo "New Threshold (after cap): $new_threshold"

      #     temp_file=jest.config.tmp

      #     # Update the jest.config.json file with the new threshold
      #     jq --argjson new_threshold "$new_threshold" '.coverageThreshold.global.lines = $new_threshold' jest.config.json > $temp_file
      #     mv $temp_file jest.config.json

      #     echo "new_threshold=$new_threshold" >> $GITHUB_OUTPUT

      # - name: Output required line coverage
      #   run: |
      #     echo "Current Jest coverage threshold for lines is ${{ steps.extract-min-code-coverage-from-main.outputs.threshold }}%"
      #     echo "Required line coverage is ${{ steps.modify-coverage-threshold.outputs.new_threshold }}%"

      # - name: Install dependencies
      #   run: npm install

      # - name: View jest.config.json
      #   run: cat jest.config.json

      # - name: Run coverage and print results
      #   run: |
      #     npm run coverage

      # - name: Read and print coverage summary
      #   id: pull-request-coverage
      #   run: |
      #     coverageFile=coverage/coverage-summary.json
      #     if [ -f "$coverageFile" ]; then
      #       echo "Coverage file found"
      #       cat $coverageFile
      #       totalCoverage=$(jq '.total.lines.pct' $coverageFile)
      #       echo "Total line coverage: $totalCoverage%"
      #       echo "totalCoverage=$totalCoverage" >> $GITHUB_OUTPUT
      #     else
      #       echo "Coverage file not found!"
      #       exit 1
      #     fi

      # - name: Print total coverage and threshold
      #   run: |
      #     echo "The line coverage on the Pull Request is ${{ steps.pull-request-coverage.outputs.totalCoverage }}%"
      #     echo "The line coverage threshold on main is ${{ steps.extract-min-code-coverage-from-main.outputs.threshold }}%"
      #     echo "The required line coverage threshold is ${{ steps.modify-coverage-threshold.outputs.new_threshold }}%"
